//**Розгалудження*/

//* Розгалудження - це конструкція, яка дозволяє виконувати різні дії в залежності від певних умов.

//** Інструкція if -  */

// console.log("before");

//! Інструкція if - це основна конструкція для розгалудження в JavaScript.
//* Вона дозволяє виконувати блок коду, якщо умова істинна (true).
//! Синтаксис:
// if (умова) {
//   //* код, який виконується, якщо умова істинна (true)
// }
//* Приклад:
// (true)
// if (5 > 3) {
//   console.log("x > y");
// }
// console.log("after");

// log("before");
// if (5 > 30) {
//   console.log("x > y");
// }
// console.log("after");
// Результат: "after"
//* У цьому прикладі умова (5 > 30) є хибною (false), тому блок коду не виконується<div className="
//* і програма продовжує виконання з наступного рядка.

//! Інструкція if....else */
//* Інструкція if....else дозволяє виконувати один блок коду, якщо умова істинна (true), і інший блок коду, якщо умова хибна (false).
//* Синтаксис:
// if (умова) {
//   // код, який виконується, якщо умова істинна (true)
// } else {
//   // код, який виконується, якщо умова хибна (false)
// }
// Приклад:
// console.log("before");
// //** (false)
// if (5 > 30) {
//   console.log("x > y");
// } else {
//   console.log("x < y");
// }

// console.log("after");

// const sum = 100;
// if (sum > 100) {
//   console.log("Big chocolate"); //* Якщо сума більша за 100, виводимо "Big chocolate" */
// } else {
//   console.log("Small chocolate"); //* Якщо сума менша або дорівнює 100, виводимо "Small chocolate" */
// }

//! Інструкція      if else if else */

//* Інструкція if....else if....else дозволяє перевіряти кілька умов послідовно.
//* Синтаксис:
// if (умова1) {
// код, який виконується, якщо умова1 істинна (true)
// } else if (умова2) {
// код, який виконується, якщо умова2 істинна (true)
// } else {
// код, який виконується, якщо жодна з умов не істинна (false)
// }

//* Приклад:
// const points = 500;
// if (points > 1500) {
//   console.log("level"); //* Якщо бали менше або дорівнюють 500, виводимо "level" */
// } else if (points > 500) {
//   console.log("level 2"); //* Якщо бали більші за 500, виводимо "level 2" */
// } else if (points < 500) {
//   console.log("level 3"); //* Якщо бали більші за 1500, виводимо "level 3" */
// } else { о жодна з умов не істинна, виводимо "level 4" */
// }
//! Якщо потрібно перевірити несувору рівність, то умови потрібно будувати за принципом воронки, звуження умов перевірки.*/

//! Тернарний оператор */

//* Тернарний оператор - це скорочений варіант інструкції if....else.
//* Синтаксис:
// умова ? вираз1 : вираз2;
//* Якщо умова істинна (true), виконується вираз1, якщо хибна (false) - вираз2.
//* Приклад:

// const balans = 500;
// let message;
// if (balans >= 0) {
//   message = "Positive balance"; //** Якщо баланс більший або дорівнює 0, виводимо "Positive balance" */
// } else {
//   message = "Negative balance"; //** Якщо баланс менший за 0, виводимо "Negative balance" */
// }
// console.log(message);

//* або

//const message = balans >= 0 ? "Positive balance" : "Negative balance"; //** Якщо баланс більший або дорівнює 0, виводимо "Positive balance" */
//console.log(message); //** Якщо баланс менший за 0, виводимо "Negative balance" */

//* Тернарний оператор зазвичай використовується для простих умов, коли потрібно присвоїти значення змінній в залежності від умови.Якщо умов більше двох, краще використовувати інструкцію if....else if....else.
//* Він робить код компактнішим і легшим для читання.

//! Блокова область видимості */
//* Блокова область видимості - це область видимості змінних, яка визначається фігурними дужками {}.
//! Змінні, оголошені всередині блоку, доступні тільки в цьому блоці.
//! Змінні, оголошені за межами блоку, доступні в усій функції або глобально*/

//* Приклад:
// const a = 15;
// if (true) {
//   console.log(a); //* 15 змінна створена в глобальній області видимості
//   const b = 20; //* змінна створена в блоковій області видимості
//   console.log(b); // 20
// }

// console.log(a); // 15
// console.log(b); //* ReferenceError: b is not defined
//* В цьому прикладі змінна a доступна в усій функції, а змінна b доступна тільки в блоці if.
//* Якщо ви спробуєте звернутися до змінної b за межами блоку, отримаєте помилку ReferenceError: b is not defined.
//* Це означає, що змінна b не існує в цій області видимості.

//**Напиши скрипт для вдображення годин та хвилин у консолі браузера у вигляді рядка формату "14 г. 26 хв". Якщо значення змінної minutes дорівнює 0, то виводь рядок "14г.", без хвилин*/
// const hours = 14;
// const minutes = 26;
// let time;

// if(minutes > 0) {
//   time = `${hours} г. ${minutes} хв`;
// } else {
//   time = `${hours} г.`;
// }

//console.log(time); // "14 г. 26 хв" або "14 г."
//* В цьому прикладі, якщо minutes більше 0, то виводимо години і хвилини, якщо 0 - тільки години.
//або

// const message = minutes > 0 ? `${hours} г. ${minutes} хв` : `${hours} г.`;//*- запис через тернарний оператор.

//**Напиши скрипт для выдображення часу дедлфйн здачы проекту. Виористовуй if еlse.*/

//* Якщо до дедлайну 0 днів - виведи рядоу "Today" * Якщо до дедлайну 1 день - виведи рядок "Tomorow".
//* Якщо до дедлайну 2 дні - виведи рядок "Owermorow"
//* Якщо до дедлайну 3+ дні -виведи рядок "Date in the future.*/
// const dedline = 10;
// if(dedline === 0) {
//   console.log("Today");//** Якщо до дедлайну 0 днів - виводи рядок "Today" */
// } else if(dedline === 1) {
//   console.log("Tomorrow");//** Якщо до дедлайну 1 день - виводи рядок "Tomorrow" */
// } else if(dedline === 2) {
//   console.log("Overmorow");//** Якщо до дедлайну 2 дні - виводи рядок "Overmorow" */
// } else {
//   console.log("Date in the future");//** Якщо до дедлайну 3+ дні - виводи рядок "Date in the future" */
// }

//! Оператор swetch case */
//* Оператор switch case - це ще один спосіб розгалудження, який дозволяє перевіряти значення змінної на відповідність кільком варіантам.switch case-перевіряє сувору рівність значення виразу з кожним з варіантів case.
//* Синтаксис:
// switch (вираз) {
//   case значення1:
//     //* код, який виконується, якщо вираз дорівнює значення1
//     break;
//   case значення2:

//     //* код, який виконується, якщо вираз дорівнює значення2
//     break;
//   // ...
//   default:
//     //* код, який виконується, якщо жоден з варіантів не підходить
// }
// }
//* Приклад:
// const user = "Alice";
// switch (user) {
//   case "Pety":
//     console.log("case 1");//** Якщо user дорівнює "Pety", виводимо "case 1" */
//*      break; припиняє виконання коду в switch, якщо не поставити break, то виконається наступний case
//   case "Alice";
//     console.log("case 2");//** Якщо user дорівнює "Alice", виводимо "case 2" */
//     break;
//   case "Yura";
//     console.log("case 3");//** Якщо user дорівнює "Yura", виводимо "case 3" */
//     break;
//   default:/
//     console.log("case 4");//** Якщо жоден з варіантів не підходить, виводимо "case 4" */
//*     break;- пісяля default  ставити break не обов'язково.
// }

//**Напиши скрипт для выдображення часу дедлфйн здачы проекту. Виористовуй if еlse.

//  * Якщо до дедлайну 0 днів - виведи рядоу "Today" * Якщо до дедлайну 1 день - виведи рядок "Tomorow".
//  * Якщо до дедлайну 2 дні - виведи рядок "Owermorow"
//  * Якщо до дедлайну 3+ дні -виведи рядок "Date in the future.*/
// const dedline = 0;
// switch (dedline) {
//   case 0:
//     console.log("Today"); //** Якщо до дедлайну 0 днів - виводи рядок "Today" */
//     break;
//   case 1:
//     console.log("Tomorrow"); //** Якщо до дедлайну 1 день - виводи рядок "Tomorrow" */
//     break;
//   case 2:
//     console.log("Overmorow"); //** Якщо до дедлайну 2 дні - виводи рядок "Overmorow" */
//     break;
//   default:
//     console.log("Date in the future"); //** Якщо до дедлайну 3+ дні - виводи рядок "Date in the future" */
// }

//**Напиши скрипт вибору опції доставки товару.
//* Опція зберігається у змінній option: 1 -самовивіз, 2 - курьєр, 3 - пошта
//
//* У змінну message записати повідомлення залежно від опції.
//* Ви зможете забрати товар завтра з 12:00 у нашому офісі.
//* Курьєр доставить замовлення завтра 3 09:00 до 18:00.
//* Посилка буде відправлена сьогодні
//* Вам передзвонить менеджер*/

// const option = 1;
// let message;
// switch (option) {
//   case 1:
//     message = "Ви зможете забрати товар завтра з 12:00 у нашому офісі.";
//     break;
//   case 2:
//     message = "Курьєр доставить замовлення завтра з 09:00 до 18:00.";
//     break;
//   case 3:
//     message = "Посилка буде відправлена сьогодні.";
//     break;
//   default:
//     message = "Вам передзвонить менеджер.";
// }

//! Логічні оператори */
//* Логічні оператори - це оператори, які дозволяють виконувати логічні операції над значеннями.
//* Вони використовуються для комбінування умов в інструкціях if, циклах та інших конструкціях.
//**  Основні логічні оператори: */
//! 1. Логічне І (AND) - &&  - повертає true, якщо обидві умови істинні (true).
//! 2. Логічне АБО (OR) - || - повертає true, якщо хоча б одна з умов істинна (true).
//! 3. Логічне НЕ (NOT) - ! - повертає true, якщо умова хибна (false), і false, якщо істинна (true).
//! 4. Логічне І (AND) - && - повертає true, якщо обидві умови істинні (true).
//! 5. Логічне АБО (OR) - || - повертає true, якщо хоча б одна з умов істинна (true).

//! Перетворення типів: логічне.
//* Явне перетворення - це перетворення типу, яке виконується явно, тобто програміст вказує, як саме потрібно перетворити значення.
//*  Приклад:
// console.log(Boolean(false)); // false
// console.log(Boolean(NaN)); // false
// console.log(Boolean(null)); // false
// console.log(Boolean(undefined)); // false
// console.log(Boolean(0)); // false
// console.log(Boolean("")); // false
// console.log(Boolean(true)); // true
// console.log(Boolean(" ")); // true
// console.log(Boolean(1)); // true
// console.log(Boolean("hello")); // true
// console.log(Boolean({})); // true
// console.log(Boolean([])); // true
// console.log(Boolean(Infinity)); // true
// console.log(Boolean(-1)); // true
// console.log(5 && 4); // 4

//! якщо обидва значення операнта в булевому(Boolean)  виражені - істинні (true), повертає значення останнього операнта".

// console.log(null && 3); //* null - якщо будь-яке значення операнта в булевому(Boolean) виражені - хибне (false), перечіпається за нього повертає його значення./

// console.log(5 && NaN); //* NaN - якщо перше значення операнта в булевому(Boolean) виражені - істинне (true), повертає значення другого операнта./

// console.log(undefined && NaN); //* undefined - якщо перше значення операнта в булевому(Boolean) виражені - хибне (false), повертає його/ ;
//console.log((true && 3));//* 3 - якщо обидва значення операнта в булевому(Boolean)  виражені - істинні (true), повертає значення останнього операнта./
//console.log(true && 3 && "Alice"); //* "Alice" - якщо обидва значення операнта в булевому(Boolean)  виражені - істинні (true), повертає значення останнього операнта./
//console.log(true && 0 && "Alice"); //* 0 - якщо будь-яке значення операнта в булевому(Boolean) виражені - хибне (false), перечіпається за нього повертає його значення./

//! Оператор логічного АБО (OR) - ||
// console.log(false || 4); //* хочаб один з оперантів в булевому(Boolean) виражені - істинні (true), повертає значення останнього  істиного операнта.
//console.log(null || false); //* null - якщо обидва значення операнта в булевому(Boolean)  виражені - хибні (false), повертає значення останнього операнта./
//console.log(true || 3); //* true - якщо перше значення операнта в булевому(Boolean) виражені - істинне (true), повертає його значення./
//console.log(true || 3 || 4); //* true - якщо перше значення операнта в булевому(Boolean) виражені - істинне (true), повертає його значення./
//console.log(true || false || 4); //* true - якщо перше значення операнта в булевому(Boolean) виражені - істинне (true), повертає його значення./
//console.log(null || 2 || NaN); //* 2 - якщо перше значення операнта в булевому(Boolean) виражені - хибне (false), повертає значення наступного операнта, якщо він істинний (true), або останнього операнта, якщо всі вони хибні (false)./
//console.log(null || (2 && 3) || 4); //* 3 - якщо перше значення операнта в булевому(Boolean) виражені - хибне (false), повертає значення наступного операнта, якщо він істинний (true), або останнього операнта, якщо всі вони хибні (false)./

//! Оператор && має вищий пріоритет, ніж оператор ||, тому вираз (2 && 3) буде обчислений першим, а потім результат буде використаний в операторі ||.

//**Напиши скрипт перевірки підписки користувача при доступі до контенту.Є три типи підписки: "free", "pro", "vip".Отримати доступ можуть тільки користувачі з підпискою "pro" або "vip". */
// const sub = "free";
// let canConect;
// if(sub === "pro" || sub === "vip") {
//   canConect = true; //* Якщо підписка "pro" або "vip", доступ дозволено

// } else {
//   canConect = false; //* Якщо підписка "free", доступ заборонено

//const canConect = sub === "pro" || sub === "vip" ? true; //* Якщо підписка "pro" або "vip", доступ дозволено.
//!const canConect = sub === "pro" || sub === "vip";
//console.log(canConect); //* Якщо підписка "free", доступ заборонено.

// const isOnline = true;
// const isFriend = true;
// const isDnD = true;//* режим "Не турбувати"

// const canConect = isOnline && isFriend && isDnD;//* перевіряє істину усіх трьох змінних

// //! Оператор заперечення */
// console.log("Can open", canConect); //* true - якщо всі три змінні істинні (true), повертає true, якщо хоча б одна з них хибна (false), повертає false./
