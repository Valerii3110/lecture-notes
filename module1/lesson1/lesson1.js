//*Модуль 1 лекція 1*

//* Інструкція (statement) — це пов'язаний набір слів і символів із синтаксису мови, які об'єднуються, щоб висловити одну ідею, тобто одну інструкцію для машини. */
//* a = b * 2;
//* a і b — змінні (як у рівнянні алгебри). Змінні — це сховища даних, які використовує програма. Вони складаються з ідентифікатора (імені) та пов'язаного з ним значення. Детальніше розберемо, що таке змінні, трохи пізніше. */
//* 2 — просто число. Це називається значенням літералу (literal value), оскільки воно не зберігається у змінній. */

//! Літерал — це значення, яке вказується безпосередньо в коді програми та представляє певний тип даних.

//* Літерал -об'єкт*
 const a = { };
//* Літерал масиву:
 const b = [];

//! Числовий літерал — це число, записане в коді програми.
//! Рядковий літерал — це послідовність символів, укладених у лапки.
//* Літерали використовуються, щоб задати початкові значення змінних та інших операцій, де потрібно конкретне значення. */

//* Числовий літерал
// const num = 10;
// 10;

//* Рядковий літерал
// const str = "JavaScript is awesome";
// ("JavaScript is awesome!");

//* Для підключення скрипта JavaScript до HTML-сторінки можна використати тег <script>. Існує кілька способів, як це можна зробити: */

//* Вбудований скрипт :
// <!DOCTYPE html>
// <html>
// <head>
//     <title>My HTML-page</title>
//     <script>
//         <!--Твій JavaScript-код тут-->
//         console.log("Hello, world");
//     </script>
// </head>
// <body>
//     <!-- Вміст сторінки -->
// </body>
// </html>

//* Зовнішній скрипт

//! По-перше, треба створити окремий файл із розширенням .js, що містить JavaScript-код. Потім під'єднати цей файл до HTML-сторінки за допомогою тега <script>, вказавши шлях до файлу в атрибуті src:
// <!DOCTYPE html>
// <html>
// <head>
//     <title>My HTML-page</title>
//     <script src="my-script.js" defer></script>
// </head>
// <body>
//     <!-- Вміст сторінки -->
//      <script src="my-script.js"></script> </script>
// </body>
// </html>

//? Якщо підключаємо скрипт в тегу <head> </head>  крім атрибуту src обовязково повинні вказати атрибут defer;
//* Тег <script> з атрибутом defer можна вставити як у <head>, так і в <body> — немає жодної різниці.
 
//! Якщо підключаємо скрипт в тегу <head> </head>  крім атрибуту src обовязково повинні вказати атрибут defer*/

//* Змінні та типи даних*/
//* Оголошення змінних */

//* Перший спосіб*
// const age = 10;
// console.log(age);

//! Якщо змінна оголошена як const, перевизначити її значення неможливо. При спробі задати їй нове значення буде помилка, яку можна побачити в інструментах розробника.

//  const username = "Mango";
// console.log(username); // "Mango"

// ❌ Неправильно, буде помилка
// username = "Poly"; // TypeError: Assignment to constant variable.
 

//*Другий спосіб*

// let totalPrice =200.5;
// console.log(totalPrice);
//! Змінна оголошена за допомогою ключового слова "let" в подальшому може бути перевизначена:

//  let username = "Mango";
// console.log(username); // "Mango"

// username = "Poly";
// console.log(username); // "Poly"

//? Якщо в створену змінну не присвоїти значення: let totalPrice; то її значення буде визначене як undefined; */

//! Варто пам'ятати, що існують зарезервовані ключові слова. Ці слова мають спеціальне значення та використовуються для певних конструкцій у мові. Не можна використовувати ключові слова як імена змінних, оскільки це спричинить помилки в коді.


//* Типи даних  */
// const age2 = 10; //* Number -число Числа (Number) можуть бути позитивними чи негативними, цілими або дробовими. Ціла та дробова частини числа розділяються крапкою.
// const str2 = "JavaScript is awesome"; //* -String-рядок Рядок (String) є послідовністю символів, вкладених в одинарні '' або подвійні лапки "".

// const message = `hello`; //* -string-рядок
// const isOpen = true; //*-Booleanбулевий тип даних Логічний тип даних (Boolean) має лише два значення: true і false.

//! На відміну від рядків, логічний тип даних пишеться без лапок. Порівняй:

//? true — це логічне значення;
//? "true" — це рядок, що містить слово true.
//*Він використовується для виконання логічних операцій та перевірок умов. Наприклад, на запитання "чи ввімкнене світло в кімнаті?" можна відповісти "так" (true) або "ні" (false).

//*let user = null; //-null тут в цій змінні дані відсутні
//* let username =; //-невизначено даних -undefined;       У JavaScript існують два спеціальні значення: null і undefined. Обидва означають відсутність значення.

//**null явно вказує на відсутність значення та часто використовується розробниками для позначення порожнього значення. Це значення має бути явно присвоєно змінній, щоб вказати, що змінна не містить ніяких дійсних даних*/.

//! Типові помилки */
//* Неправильне ім’я змінної
// const username = "Mango";
// console.log(user); // ReferenceError: user is not defined
//! Звернення до змінної до її оголошення// ❌ Неправильно, буде помилка
// console.log(age); // ReferenceError: age is not defined

//** Оголошення змінної age*/
// let age = 20;

//* ✅ Правильно, звертаємося після оголошення
// age = 25;
// console.log(age); // 25

//** Арифметичні операції */

// const x = 10;
// const y = 5;
//              10 + 5
//console.log(x + y);//15
//                 10 - 5
//console.log(x - y);//5
//               10 * 5
//console.log(x * y);//50
//              10 / 5
//console.log(x / y);//2

// const x = 10;
// const y = 4;
// const x = 13;
// const y = ;

//console.log(x % y);//2 -залишок від ділення одного числа на інше // 10 = 4 + 4 +2 або 13 = 4 + 4 + 4 + 1

// const x = 10;
// const y = 4;
// //1000 -приведення до степеня 10 в 4 степені

//** Виведи на екран загальну кількіст яблук та винограду.
 //* Рзізницю яблук та винограду*/

// const appeles = 40;
// const grapes = 130;
// const total = appeles + grapes; //* - створення зміної не обовязкове;
// console.log(total);
// console.log(appeles - grapes);
// console.log(appeles + grapes);

//** Зміни вираз перевизначення комбінованим оператором */
// let students = 100;

// students = students + 20;
// students += 20; - тотожний вираз
// students -= 20;
// students *= 20;

// console.log(students);

//** Розбери пріоритет операторів в інструкції привласнення значення змінної*/
//
// const result = 100 + 50 - 2 * 5;//* по принципу алгебри можна підглянути
// console.log(result);

//**Рядки */

// const firstName = "Alice";
// const LastName = "Franko";

// const fullName = firstName + LastName;
// console.log(fullName);

//**Конкатенація рядків
Якщо застосувати оператор + до рядка та будь-якого іншого типу даних, результатом буде новий рядок, що містить об'єднання вихідних значень. Це називається конкатенація (склеювання).
const message = "Mango " + "is" + " happy";
console.log(message); // "Mango is happy"
Зверни увагу!
Рядки "Mango " і " happy" містять пробіли, щоб текст повідомлення був читабельним.

Під час конкатенації можна використовувати значення змінних, щоб складати рядки з динамічними значеннями. Для цього необхідно вказати ім'я змінної, у це місце буде підставлено її значення.
const age = 24;
const message = "Poly is " + age + " years old!";
 const fullName = `${firstName} + ${LastName}`;//- літерал шаблонного рядка:
 console.log(fullName);

Під час конкатенації будь-який тип даних буде приведено до рядка та поєднано з іншим рядком.

 */
//**Довжина рядка */
//* Властивості — це описові характеристики сутності.
//* Для доступу до властивості (property) сутності (objectName) використовується синтаксис із крапкою:
//* сутність.властивість

//**Довжина рядка визначається кількістю символів у ньому. Щоб дізнатися довжину рядка, використовується вбудована властивість length. Щоб отримати значення цієї властивості, необхідно звернутися до неї через крапку після імені змінної чи рядкового літералу.
const productName = "Repair droid";

//* Якщо у змінній зберігається рядок
console.log(productName.length); // 12

//* Якщо рядковий літерал
console.log("Repair droid".length); // 12
пв*/

//** Рядки — це набори символів, де кожен символ має свій порядковий номер (індекс). Індексація елементів рядка починається з нуля. Перший символ має індекс 0, другий — індекс 1, третій — 2 і так далі. */
//**Для доступу до певного символу рядка ми використовуємо синтаксис квадратних дужок, де вказуємо індекс потрібного символу: string[index], тобто рядок[індекс].

//                 0123-індекс символа
// const str = "Hello world";
// console.log(str[6]); // -визначення символу через його індекс

//**Довжина рядка */
// const product = "Repair droid";
// console.log(product[0]); // 'R'
// console.log(product[5]); // 'r'
// console.log(product[11]); // 'd'

//**Отримання останнього символу рядка можливе за його індексом string[lastIndex]. Щоб знайти індекс останнього символу рядка, треба від довжини цього рядка відняти одиницю string.length - 1 const product = "Repair droid";
// const lastElementIndex = product.length - 1;
// console.log(product[lastElementIndex]); // 'd'

//** Для доступу до останнього символу рядка без створення проміжної змінної ми можемо вставити вираз (product.length - 1) безпосередньо у квадратні дужки при зверненні до елемента.
// const product = "Repair droid";
// console.log(product[product.length - 1]); // 'd'

