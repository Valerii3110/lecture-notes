/**Модуль 1 лекція 2 */
/** Перетворення типів числа
 * -Явне перетворення типів
 * -Неявне перетворення типів*/

// 1. Явне перетворення типів
// console.log(Number("5"))// "5" -
// console.log(Number(true))// true - 1
// console.log(Number(false))// false - 0;
// console.log(Number(null))// null - 0
// console.log(Number(undefined))// undefined - NaN;
// console.log(Number("25px"));//-25

//2. Неявне перетворення
//console.log("5" * 2);/ 10;
//console.log("10" - 2);/ 8;
//console.log(5 +  true);/ 6;
//console.log(5 +  false);/ 5;
//console.log("5px" - 2); // NaN

/**Оператори порівняння */
// console.log(5 > 2); // true;
// console.log(5 < 2); // false;
// console.log(5 >= 2); // true;
// console.log(5 <= 2); // false;
// console.log("2" > "12"); //true; - рядки порівнюються за юнікодом посимвольно, числове представлення 2 більше за числове призначення 1 і далі переірка не проходить.

//console.log("4" == 4); // true == -оператор несуворої рівності перевіряє значення, та не перевіряє типи;
//console.log(5 === "5");// false === - оператор суворої рівності перевіряє значення та типи;
//console.log(1 == true); // true;
//console.log(1 === true); // false;
//console.log("0" == false); // true;
//console.log("Alice" < "alice"); // true; - порівняння рядків відбувається за юнікодом, тому "A" < "a" - true, оскільки "A" має менше числове представлення ніж "a";Символ в нижньому регістрі має більше числове представлення ніж символ в верхньому регістрі;

/**Арифметичні функції */
let width = "50px";
// width = Number(width);
// console.log(width); // NaN

/**Метод Number.perseInt */
/**Метод Number.parseInt() приймає 2 аргументи:

Рядок. Якщо аргумент не є рядком, то він буде спочатку перетворений у рядок
Система числення, до якої відноситься рядок (не обов’язковий аргумент, за замовчуванням десяткова система). Наприклад, для десяткової системи буде 10, для шістнадцяткової - 16 тощо..


Метод аналізує рядок зліва направо, видаляючи пробіли на початку і перетворюючи допустимі символи у число до тих пір, поки не зіткнеться з першим недопустимим символом. Після цього аналіз припиняється, і вже перетворене ціле число повертається. 
// console.log(Number.parseInt("5")); // 5 
// console.log(Number.parseInt("5.5"));// 5 
// console.log(Number.parseInt("5cm")); // 5 
// console.log(Number.parseInt("12qwe74"));// 12
// console.log(Number.parseInt("12.46qwe79")); // 12 
// console.log(Number.parseInt("cm5")); // NaN
//  console.log(Number.parseInt("")); // NaN
//  console.log(Number.parseInt("qweqwe")); // NaN
*/
//width = Number.parseInt(width); //
// console.log(width); // 50

let height = "200.53px";
// height = Number.parseInt(height); // 200
// console.log(height); // 200

/**Метщд Number.parseFloat */

/**Метод Number.parseFloat() аналогічний Number.parseInt() з однієї відмінністю: перетворює рядок на число з плаваючою крапкою. 
//console.log(Number.parseFloat("5")); // 5
//console.log(Number.parseFloat("5.5")); // 5.5
//console.log(Number.parseFloat("3.14")); // 3.14
//console.log(Number.parseFloat("5cm")); // 5
//console.log(Number.parseFloat("5.5cm")); // 5.5
//console.log(Number.parseFloat("12qwe74")); // 12
//console.log(Number.parseFloat("12.46qwe79")); // 12.46
/*Якщо перші символи рядка не можуть бути перетворені на число, або рядок порожній чи відсутній, результатом буде значення NaN (Not a Number).
//console.log(Number.parseFloat("cm5")); // NaN
//console.log(Number.parseFloat("")); // NaN
//console.log(Number.parseFloat("qweqwe")); // NaN
*/
// let height = "200.53px";
// height = Number.parseFloat(height); // 200.53

/**Клас Math є вбудованим класом JavaScript. Цей клас надає набір методів для виконання математичних операцій та роботи з числами. Ось кілька найбільш корисних методів, які надає клас Math:

Math.floor(num): повертає найближче ціле число, яке є меншим або дорівнює вказаному числу num. Наприклад:
console.log(Math.floor(1.3)); // 1
console.log(Math.floor(1.7)); // 1
 */

/**Math.ceil(num): повертає найближче ціле число, яке є більшим, або дорівнює зазначеному числу num. Наприклад: 
console.log(Math.ceil(1.3)); // 2
console.log(Math.ceil(1.7)); // 2
*/

/**Math.round(num): повертає значення числа після округлення до найближчого цілого. Округлення відбувається за математичними правилами, якщо десяткова частина числа менша 0.5, то округлення буде в меншу сторону, якщо 0.5 і більше — то в більшу.

Наприклад:
console.log(Math.round(1.3)); // 1
console.log(Math.round(1.7)); // 2

 */

/**Напиши скрипт, який виводить у консоль заукруглені вгору/вниз і т.д. значення змінної value. використовуй  методи Math.floor(num), Math.ceil(num),Math.round(num)*/

// let value = 27.5;

// console.log(Math.floor(value)); // 27-округлення вниз до найближчого цілого числа;
// console.log(Math.ceil(value)); // 28-округлення вгору до найближчого цілого числа;
// console.log(Math.round(value)); // 28-округлення до найближчого цілого числа;

/**Використовувати метод числа toFixed() для округлення результату до певної кількості знаків після крапки.



console.log((0.1 + 0.2).toFixed(1)); // "0.3"
console.log((5).toFixed(2));  //  ”5.00”
console.log((8.762195).toFixed(4));  //  “8.7622”



Метод toFixed() повертає рядок, що представляє число із зазначеною кількістю знаків після крапки. Таким чином, ми можемо отримати заокруглений результат з необхідною точністю. */

/**Функції */
/**Функція - це об’єкт, який може бути викликаний (виконаний) у програмі. Функції в JavaScript є першокласними об’єктами, що означає, що вони можуть бути передані як аргументи іншим функціям, повертатися з інших функцій і зберігатися в змінних.
 *
 * Функція - це блок коду, який можна виконати за допомогою його імені. Функції дозволяють організувати код у логічні блоки, які можна повторно використовувати.
 *
 * Функції в JavaScript можуть бути оголошені різними способами:
 *
 * 1. Функціональний вираз
 * 2. Функціональний декларатив
 * 3. Стрілочна функція
 * 4. Анонімна функція
 */

// function add(x, y) {
//   console.log("Hello");
// }

// add(5, 3);

//function(x, y) У круглих дужках після імені функції вказуються параметри. Параметри є перерахуванням даних, які очікує функція під час виклику.
//add(5, 3);-значення які передаються функції під час виклику функції, називаються аргументами функції. Аргументи функції можуть бути будь-якими типами даних, включаючи числа, рядки, масиви, об’єкти та інші функції. Функція може приймати кілька аргументів, які розділяються комами під час виклику функції.*/
/**1. Функціональний вираз
 * Функціональний вираз - це функція, яка присвоюється змінній. Функція може бути викликана за допомогою імені змінної.
function add() {
    console.log("Hello");

} -створює функцію add, яка виводить "Hello" у консоль
add(); // Hello-виклик функції
function add() {
    console.log("Hello");
}*/

// function add(x, y) {
//   const total = x + y; // total - локальна змінна, яка доступна тільки в тілі функції
//   console.log(x + y); //параметри функції існують тільки в тілі функції, тому що вони є локальними змінними. Вони не можуть бути доступні ззовні функції. Параметри функції можуть мати однакові імена, як і змінні в глобальному просторі імен, але це не рекомендується, оскільки це може призвести до плутанини.
//   return total; // припиняє роботу функції і повертає значення total з функції
//   //код який написаний після return не буде виконуватись/
//   //якщо у функції не вказано return, то функція повертає undefined* функцію буде повернуто в місце свого виклику/
// }
// console.log();

// //add(5, 3);//
// //add(5, 3); // 8;
// const a = add(5, 6); // 11
// console.log("a", a); //a 11
/** Задача про нарахування заробітної платні*/
// function foo(x, y) {
//   const dayTotal = x * 8 *1.2;
//   return dayTotal * y;
// }

// const petya = 20 * 8 * 20 * 1,2;
// const petya1 = foo(20, 20);
// const alice = 20 * 8 * 15 * 1,2;
// const alice1 = foo(20, 15);
// const yura = 15 * 8 * 21 * 1,2;
// const yura1 = foo(15, 21);

// console.log("petya", petya); // petya 3200
// console.log("alice", alice); // alice 2400
// console.log("yura", yura); // yura 2520

/**Область видимості */
/**Область видимості - це частина програми, в якій змінна або функція доступна для використання. Вона визначає, де змінна або функція може бути доступна в коді. У JavaScript існує дві основні області видимості: глобальна та локальна.
 *
 * Глобальна область видимості - це область видимості, яка охоплює весь код програми. Змінні та функції, о голошені в глобальній області видимості, доступні з будь-якої частини програми.
 *
 * Локальна область видимості - це область видимості, яка обмежена певною функцією або блоком коду. Змінні та функції, оголошені в локальній області видимості, доступні тільки в межах цієї функції або блоку коду.
 *
 * У JavaScript існує три типи локальної області видимості:
 *
 * 1. Функціональна область видимості
 * 2. Блочна область видимості
 * 3. Глобальна область видимості

const str = "Hello"; // глобальна змінна- змынна створена за межами функції, доступна в будь-якій частині програми*/
// const str = "Hello";
// function foo() {
//   const msg = "World"; // локальна змінна- змынна створена в тілі функції, доступна тільки в тілі функції
//   console.log(msg); // World
//   function lalala() {
//     const a = "lalala"; // локальна змінна- змынна створена в тілі функції, доступна тільки в тілі функції
//     console.log(a); // lalala
//     console.log(msg);//

//   }
//   console.log(a);

// }
// foo(); // World
// console.log(msg);// ReferenceError: msg is not defined
// // msg - ReferenceError: msg is not defined
// console.log(a); // ReferenceError: a is not defined

/**Напиши функцію calcBMI(weight, height)  яка розраховує та повертає індекс маси тіла людини. Для цього необхідно розділити вагу на квадрат висоти
 *
 * Вага та висота будуть спеціально передані як рядки.Не цілі числа можуть бути задані у вигляді дробових чисел з крапкою, наприклад 24,7 або 24.7,тобто як роздільник дробової частини може бути кома.
 *
 * Індекс маси необхідно округлити до однієї цифри після коми.
 */

// function calcBMI(weight, height) {
//   let numWeight = weight.replace(",", "."); //-заміняємо кому на крапку
//   numWeight = Number.parseFloat(numWeight); //-перетворюємо рядок на число
//   console.log(numWeight); // 88.3 привели вагу до числа

//   let Height = Number.parseFloat(height); //-перетворюємо рядок на число
//   console.log(Height); // 1.75 привели висоту до числа
//   const bmi = weight / (height ** 2); //-розраховуємо індекс маси тіла
//   return bmi.toFixed(1);//-округлюємо до однієї цифри після коми повертає індекс маси тіла
// }
// const bmi = calcBMI("88.3", "1.75");
