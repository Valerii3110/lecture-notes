/**–§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–≥–æ –≤–∏–∫–ª–∏–∫—É (callback)
 *
 * –§—É–Ω–∫—Ü—ñ—è —è–∫ –∑–Ω–∞—á–µ–Ω–Ω—è
 * –ö–æ–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
 * –Ü–Ω–ª–∞–π–Ω –∫–æ–ª–±–µ–∫–∏
 */

// function foo(a, b) {
//   return a + b;
// }
// const a1 = foo;
// console.log(a1(1, 2)); //3

// console.log(foo(2, 3)); //5
// console.log(foo); //∆í foo(a, b) {
//   return a + b;
// }

// function fnA(num) {
//   console.log("fnA", num * 2); //fnA 4
// }

// function foo(a, b) {
//   return a + b;
// }

//foo(1, 2, fnA); /**–§—É–Ω–∫—Ü—ñ—è —è–∫–∞ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –≤ —ñ–Ω—à—É —Ñ—É–Ω–∫—Ü—ñ—é —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç - –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è callback-—Ñ—É–Ω–∫—Ü—ñ—è */

//           1  2    fnA
// function foo(a, b, callback) {
//   console.log(callback); // ∆í fnA(num) {
//   // console.log("fnA", num * 2);
//   //}
//   callback(2);
//   return a + b;
// }

// console.log(foo(1, 2, fnA));

// console.log(foo);
// const a = foo;
// console.log(a(1, 2));

//* –§—É–Ω–∫—Ü—ñ—è calc(a, b, callback)/

// function calc1(a, b) {
//   console.log("hello"); //hello
//   console.log("lalala"); //lalala
//   // const result = callback(a, b);
//   const result = a + b;
//   console.log(result); //3
// }
// calc1(1, 2);

// function calc2(a, b) {
//   console.log("hello"); //"hello"
//   console.log("lalala"); //"lalala"
//   const result = a - b;
//   console.log(result); //8
// }
// calc2(10, 2);

// function calc1(a, b, callback) {
//   console.log("hello"); //hello
//   console.log("lalala"); //lalala
//   // const result = callback(a, b);
//   const result = callback(a, b);
//   console.log(result); //
// }

// calc1(10, 2, function (x, y) {
//   return x + y;
// }); //hello
// //lalala
// //12

// calc1(5, 3, function (x, y) {
//   return x - y;
// });//hello
//lalala
//2
/**–Ø–∫—â–æ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—è –º–∞–ª–µ–Ω—å–∫–∞ —ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º, —ó—ó –º–æ–∂–Ω–∞ –æ–≥–æ–ª–æ—Å–∏—Ç–∏ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –Ω–∞ –º–æ–º–µ–Ω—Ç –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó, –≤ —è–∫—É –ø–µ—Ä–µ–¥–∞—î–º–æ –∫–æ–ª–±–µ–∫. –¢–∞–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–∞–∑–∏–≤–∞—é—Ç—å—Å—è —ñ–Ω–ª–∞–π–Ω-–∫–æ–ª–±–µ–∫–∏. –í–æ–Ω–∏ –±—É–¥—É—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç—ñ–ª—å–∫–∏ –≤ —è–∫–æ—Å—Ç—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —ñ –±—ñ–ª—å—à–µ –Ω—ñ–¥–µ –≤ –∫–æ–¥—ñ*/

// * –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é (arry, callback) —è–∫–∞ –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á—ñ–∫—É—î –º–∞—Å–∏–≤ , —Ñ –¥—Ä—É–≥–∏–º - —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—É –º–∞—Å–∏–≤—É. –§—É–Ω–∫—Ü—ñ—è each –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏, –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–ª–±–µ–∫—É.

// function each(array, callback) {
//   const newArr = [];
//   for (const num of array) {
//     // console.log(callback(num));

//     newArr.push(callback(num));
//   }
//   return newArr;
// }

// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return value * 2; //[128, 98, 72, 50, 32]
//   })
// );
// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return value - 10; //[54, 39, 26, 15, 6]
//   })
// );
// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return Math.sqrt(value); //¬†[8, 7, 6, 5, 4]
//   });
// );

//*–°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
/**
–°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (—Å–ª–µ–Ω–≥ ‚Äî ‚Äú—Å—Ç—Ä—ñ–ª–∫–∏‚Äù) –º–∞—é—Ç—å —Å–∫–æ—Ä–æ—á–µ–Ω–∏–π, –ª–∞–∫–æ–Ω—ñ—á–Ω—ñ—à–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, —â–æ –∑–º–µ–Ω—à—É—î –æ–±—Å—è–≥ –∫–æ–¥—É, –æ—Å–æ–±–ª–∏–≤–æ –∫–æ–ª–∏ —Ñ—É–Ω–∫—Ü—ñ—è –º–∞–ª–µ–Ω—å–∫–∞ –∞–±–æ —è–∫—â–æ –≤–æ–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —è–∫ –∫–æ–ª–±–µ–∫. */
//* –û–≥–æ–ª–æ—à–µ–Ω–Ω—è
//* –Ü–Ω–ª–∞–π–Ω —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
// add(1, 2);

/**–ó–≤–∏—á–∞–π–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è */

// add(1, 2);
// function add(a, b) {
//   console.log(arguments); //Arguments(2)¬†[1, 2, callee: ∆í, Symbol(Symbol.iterator): ∆í]

//   console.log(a, b); // 1 2
// }

/**–°—Ç—Ä—ñ–ª–æ—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
 * —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Å—Ç—Ä—ñ–ª–æ—á–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
 * —Å—Ç—Ä—ñ–ª–æ—á–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –Ω–µ –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –¥–æ –º–æ–º–µ–Ω—Ç—É —ó—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, —Ç–æ–º—É —â–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –≤–æ–Ω–∞ —è–∫ –∑–≤–∏—á–∞–π–Ω–∞ –∑–º—ñ–Ω–Ω–∞ —ñ –Ω–∞ –Ω–µ—ó –¥—ñ—é—Ç—å —Ç—ñ–∂ —Å–∞–º—ñ –ø—Ä–∞–≤–∏–ª–∞
 */

// const addArrow = (a, b) => {
//   console.log(arguments); // –≤ —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ—è—Ö –ø—Å–µ–≤–¥–æ–º–∞—Å–∏–≤—É arguments -–Ω–µ–º–∞—î
//   return a + b;
// };

// console.log(addArrow(10, 20)); //30

/**(a, b) - –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—ó
 * {} -—Ç—ñ–ª–æ —Ñ—É–Ω–∫—Ü—ñ—ó*/
/** –Ø–∫—â–æ –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏  —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —è–∫—ñ –±—É–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ñ –≤ –Ω–∞—à—É —Å—Ç—Ä—ñ–ª–æ—á–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é  –ø—ñ–¥ —á–∞—Å —ó—ó –≤–∏–∫–ª–∏–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ  ...rest - –æ–ø–µ—Ä–∫—Ç–æ—Ä*/

// const addArrow = (...rest) => {
//   return rest;
// };
// console.log(addArrow(10, 20, 30));

// const addArrow = (a, b) => {
//   return a + b;
// };

// console.log(addArrow(10, 20));//30

/**–Ø–∫—â–æ –º–∏ –ø–µ—Ä–µ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –ª–∏—à–µ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç —Ç–æ –∫—Ä—É–≥–ª—ñ –¥—É–∂–∫–∏ –º–æ–∂–Ω–∞ –ø—Ä–∏–±—Ä–∞—Ç–∏, —è–∫—â–æ —Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –¥–µ–∫—ñ–ª—å–∫–∞ –∞–±–æ –Ω–µ–º–∞—î –≤–∑–∞–≥–∞–ª—ñ  –∫—Ä—É–≥–ª—ñ –¥—É–∂–∫–∏ —Å—Ç–∞–≤–∏—Ç–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ */
// const addArrow = a => {
//   return a + 20;
// };

// console.log(addArrow(10)); //30

/** –ù–µ—è–≤–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
 * –Ø–∫—â–æ –≤ –Ω–∞—à—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó —î–¥–∏–Ω–∞ –¥—ñ—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —á–æ–≥–æ—Å—å –º–æ–∂–Ω–∞ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—å –∫–æ—Ä–æ—Ç–∫–∏–º —Å–∏–Ω—Ç–∞–∫—Å–µ—Å–æ–º –ø—Ä–∏–±—Ä–∞—Ç–∏ —Ñ—ñ–≥—É—Ä–Ω—ñ –¥—É–∂–∫–∏
 */
// const addArrow = (a) => a + 20;

// console.log(addArrow(10));//30

/** –Ø–≤–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –æ–±—î–∫—Ç—É */
// const addArrow = (a) => {
//   return {
//     a,
//   };
// };
// console.log(addArrow(10)); //{
//   "a": 10
// }
/**–ù–µ—è–≤–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –æ–±—î–∫—Ç—É –∑ —Å—Ç—Ä—ñ–ª–æ—á–Ω–æ—ó —Ñ—É–∫—Ü—ñ—ó  */
// const addArrow = (a) => ({ a });
// console.log(addArrow(10)); //{a: 10}

/**–ù–µ—è–≤–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –º–∞—Å–∏–≤—É –∑ —Å—Ç—Ä—ñ–ª–æ—á–Ω–æ—ó —Ñ—É–∫—Ü—ñ—ó  */
// const addArrow = (...a) => [a];
// console.log(addArrow(5, 10, 15, 20)); //
// [5, 10, 15, 20];

// const calc = (a, b, callback) => {
//   const result = callback(a, b);
//   console.log(result); //7
// };

// calc(2, 5, (x, y) => {
//   return x + y;
// });

// calc(10, 4, (x, y) => x - y);

//* –ú–µ—Ç–æ–¥ forEach(callback)
//* –ü–æ–µ–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤
//* –ù—ñ—á–æ–≥–æ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î
//* –ó–∞–º—ñ–Ω—è—î –∫–ª–∞—Å–∏—á–Ω–∏–π for, for ..of, —è–∫—â–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ—Ä–∏–≤–∞—Ç–∏ —Ü–∏–∫–ª

// const numbers = [5, 10, 15, 20, 25];
// numbers.forEach(function (number, index, arr) {
//   console.log(number, index, arr);
// });
/**–ú–µ—Ç–æ–¥ .forEach –ø—ñ–¥ —á–∞—Å —Å–≤–æ–≥–æ –≤–∏–∫–ª–∏–∫—É —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é (callback-—Ñ—É–Ω–∫—Ü—ñ—è) –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ 1-–π number –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É, 2-–π index -—ñ–Ω–¥–µ–∫—Å —Ü—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—É, 3-–π arr -–ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∏—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤.–Ø–∫—â–æ –¥–µ—è–∫—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∞–º –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —ó—Ö –º–æ–∂–Ω–∞ –Ω–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏, –∞–ª–µ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è*/
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑–Ω–∞—á–µ–Ω–Ω—è
// numbers.forEach((value) => {
//   console.log(value);
// });
/**–ü—Ä–∏–ø–∏–Ω–∏—Ç–∏ (–ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –ø–µ—Ä–µ–±–∏—Ä–∞—é—á–æ–≥–æ –º–µ—Ç–æ–¥—É .forEach –Ω–µ–º–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –±—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–∏–π –¥–æ –∫—ñ–Ω—Ü—è –º–∞—Å–∏–≤—É ) */

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —ñ —ñ–Ω–¥–µ–∫—Å
// numbers.forEach((value, index) => {
//   console.log(`Index ${index}: ${value}`);
// });

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—Å—ñ 3 –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
// numbers.forEach((value, index, arr) => {
//   console.log(`Value ${value} from array [${arr}] at index ${index}`);
// });

// let sum = 0;
// numbers.forEach((num) => (sum += num));
// console.log(sum); //75

//* –í–∏–∫–æ–Ω–∞–π —Ä–µ—Ñ—Ä–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É forEach —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó

// function logItem(items) {
//   console.log(items);

//   for (let i = 0; i < items.length; i += 1) {
//     console.log(`${(i = 1)} - ${item[i]}`);
//   }
//   return ite;
// }

// const logItem = (arr) => {
//   arr.forEach((item, i) => {
//     console.log(`${i + 1}: ${item}`);
//   });
// };

// logItem(["Mango", "Poly", "Ajax"]);
// logItem(["üçé", "üçá", "üçë", "üçå", "üçã"]);

//* –í–∏–∫–æ–Ω–∞–π —Ä–µ—Ñ—Ä–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É forEach —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
// * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
// * –£ –∑–º—ñ–Ω–Ω–∏—Ö names —Ç–∞ phones –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤,
// * —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É —Ä—è–¥–∫–∞—Ö –≤–∫–∞–∑—É—é—Ç—å –Ω–∞
// * –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å. –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.
// */

// function printContactsInfo({ names, phone }) {
//   const namesArr = names.split(",");
//   const phonesArr = phone.split(",");
//   for (let i = 0; i < namesArr.length; i++) {
//     console.log(`${namesArr[i]}: ${phonesArr[i]}`);
//   }
// }

// const printContactsInfo = (obj) => {
//   const namesArr = obj.names.split(",");
//   const phonesArr = obj.phones.split(",");

//console.log(phonesArr); //(4)¬†['38001234567', '38001112233', '380055566377', '380055566300']

//   namesArr.forEach((item, index) => {
//     console.log(`${item} - ${phonesArr[index]}`); /**Jacob - 38001234567
//     lesson9.js:269 William - 38001112233
//     lesson9.js:269 Solomon - 380055566377
//     lesson9.js:269 Artemis - 380055566300 */
//   });
// };

// printContactsInfo({
//   names: "Jacob,William,Solomon,Artemis",
//   phones: "38001234567,38001112233,380055566377,380055566300",
// });

//* –í–∏–∫–æ–Ω–∞–π —Ä–µ—Ñ—Ä–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É forEach —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
// function calculateAverage(...args) {
//   let total = 0;
//   for (let i = 0; i < args.length; i++) {
//     total += args[i];
//   }
//   return total / args.length;
// }

// const calculateAverage = (...rest) => {
//   // console.log(rest);
//   let total = 0;
//   rest.forEach((num) => (total += num));
//   return total / rest.length;
// };

// console.log(calculateAverage(1, 2, 3, 4)); //2.5
// console.log(calculateAverage(14, 8, 2)); //8
// console.log(calculateAverage(27, 43, 2, 8, 36)); //23.2

/**Array.prototype.map()
 * –ü–æ–µ–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤
 * –ù–µ –∑–º—ñ–Ω—é—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤
 * –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ —Ç–∞–∫–æ—ó –∂ –¥–æ–≤–∂–∏–Ω–∏
 */

// const allCars = [
//   {
//     make: "Honda",
//     model: "CR-V",
//     type: "suv",
//     amount: 14,
//     price: 24045,
//     onSale: true,
//   },
//   {
//     make: "Honda",
//     model: "Accord",
//     type: "sedan",
//     amount: 2,
//     price: 22455,
//     onSale: true,
//   },
//   {
//     make: "Mazda",
//     model: "Mazda 6",
//     type: "sedan",
//     amount: 8,
//     price: 24195,
//     onSale: false,
//   },
//   {
//     make: "Mazda",
//     model: "CX-9",
//     type: "suv",
//     amount: 7,
//     price: 31520,
//     onSale: true,
//   },
//   {
//     make: "Toyota",
//     model: "4Runner",
//     type: "suv",
//     amount: 19,
//     price: 34210,
//     onSale: false,
//   },
//   {
//     make: "Toyota",
//     model: "Sequoia",
//     type: "suv",
//     amount: 16,
//     price: 45560,
//     onSale: false,
//   },
//   {
//     make: "Toyota",
//     model: "Tacoma",
//     type: "truck",
//     amount: 4,
//     price: 24320,
//     onSale: true,
//   },
//   {
//     make: "Ford",
//     model: "F-150",
//     type: "truck",
//     amount: 11,
//     price: 27110,
//     onSale: true,
//   },
//   {
//     make: "Ford",
//     model: "Fusion",
//     type: "sedan",
//     amount: 13,
//     price: 22120,
//     onSale: true,
//   },
//   {
//     make: "Ford",
//     model: "Explorer",
//     type: "suv",
//     amount: 6,
//     price: 31660,
//     onSale: false,
//   },
// ];

/**–ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è getModels –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –º–æ–¥–µ–ª–µ–π (–ø–æ–ª–µ model) –≤—Å—ñ—Ö –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ */
// const getModels = (cars) => {
//   const arr = [];
//   cars.forEach((item) => {
//     arr.push(item.model);
//   });
//   return arr;
// };

// console.log(getModels(allCars)); //(10)¬†['CR-V', 'Accord', 'Mazda 6', 'CX-9', '4Runner', 'Sequoia', 'Tacoma', 'F-150', 'Fusion', 'Explorer']

// const getModels = (cars) => {
//   const res = cars.map((item) => {
//     return item.model;
//   });
//   return res;
// };

// [
//   "CR-V",
//   "Accord",
//   "Mazda 6",
//   "CX-9",
//   "4Runner",
//   "Sequoia",
//   "Tacoma",
//   "F-150",
//   "Fusion",
//   "Explorer",
// ];

/** –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è makeCarsDiscount –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤  —à–∑ –∑–º—ã–Ω–µ–Ω–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ price, –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –Ω–∞–¥–∞–Ω–æ—ó –∑–Ω–∏–∂–∫–∏*/

// const makeCarsDiscount = (cars, discount) => {
//   return cars.map((item) => {
//     return {
//       ...item,
//       price: item.price * (1 - discount),
//     };
//   });
// };

// console.table(makeCarsDiscount(allCars, 0.2));
// console.table(makeCarsDiscount(allCars, 0.4));

// const players = [
//   { id: "player-1", name: "Mango", timePlayed: 310, points: 54, online: false },
//   { id: "player-2", name: "Poly", timePlayed: 470, points: 92, online: true },
//   { id: "player-3", name: "Kiwi", timePlayed: 230, points: 48, online: true },
//   { id: "player-4", name: "Ajax", timePlayed: 150, points: 71, online: false },
//   { id: "player-5", name: "Chelsy", timePlayed: 80, points: 48, online: true },
// ];

/*
 * –ó–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω –≥—Ä–∞–≤—Ü—è –∑–∞ id
 */
// const playerId = "player-3";

// const update = (arr, id) => {
//   return arr.map((item) => {
//     if (item.id === id) {
//       return {
//         ...item,
//         timePlayed: item.timePlayed + 100,
//       };
//     }

//     return item;
//   });
// };

// console.table(update(players, playerId));

/**–ú–µ—Ç–æ–¥ flatMap
 * –†–æ–∑–≥–æ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –¥–æ –ø–µ—Ä—à–æ–≥–æ —Ä—ñ–≤–Ω—è –≤–∫–ª–∞–¥–µ–Ω–æ—Å—Ç—ñ.
 */
// const tweets = [
//   { id: "000", likes: 5, tags: ["js", "nodejs"] },
//   { id: "001", likes: 2, tags: ["html", "css"] },
//   { id: "002", likes: 17, tags: ["html", "js", "nodejs"] },
//   { id: "003", likes: 8, tags: ["css", "react"] },
//   { id: "004", likes: 0, tags: ["js", "nodejs", "react"] },
// ];

// const tgs = tweets.flatMap((item) => item.tags);
// console.log(tgs); //¬†['js', 'nodejs', 'html', 'css', 'html', 'js', 'nodejs', 'css', 'react', 'js', 'nodejs', 'react']
