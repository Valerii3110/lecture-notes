//!Масиви*/
//*Створення масиву
//*Доступ до елементів масиву
//*Перевизначення елементів масиву
//*Довжина масиву
//*Методи масивів
//*Індес останнього елемента масиву
//*Перевизначення елементів масиву

//!Масиви -індексована сутність, що дозволяє зберігати колекцію даних.
const courses = ["HTML", "CSS", "JavaScript", "React", "Node.js"];
console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'React', 'Node.js']
//*Iндексування масивів починається з 0, тому перший елемент має індекс 0, другий - 1 і так далі.
//*Доступ до елементів масиву здійснюється за допомогою квадратних дужок [] та індексу елемента.
const numbers = [1, 2, 3, 4, 5];
console.log(numbers[2]);
console.log(numbers.length); // 5
//*Довжина масиву визначається властивістю length, яка повертає кількість елементів у масиві
console.log(numbers.length - 1); //
//*Індекс останнього елемента масиву можна отримати, віднявши 1 від довжини масиву.
//*Перевизначення елементів масиву здійснюється шляхом присвоєння нового значення за індексом.
numbers[2] = 10;
console.log(numbers); // [1, 2, 10, 4, 5]
courses[4] = "Express.js";
console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'React', 'Express.js']
// let a = 5;
// let b = 5;
// console.log("a", a); // a 5
// console.log("b", b); // b 5

// let a = 5;
// let b = a;
// console.log("a", a); // a 5
// console.log("b", b); // b 5

let a = [1, 2, 3]; // * Масиви в JavaScript є об'єктами, тому вони передаються за посиланням, а не за значенням. Це означає, що якщо ви присвоїте масив іншій змінній, обидві змінні будуть вказувати на той самий масив в пам'яті. */
let b = a; //* Масиви в JavaScript передаються за посиланням , тому змінна b буде вказувати на той самий масив (на те саме посилання в пам'яті), що й a */
a[0] = 100; //* Якщо ви зміните значення в масиві a, то це також вплине на масив b, оскільки обидві змінні вказують на той самий об'єкт в пам'яті.
console.log("a", a); // a [100, 2, 3]
console.log("b", b); // b [100, 2, 3]

console.log(a === b); // true
//*Порівняння масивів в JavaScript здійснюється за посиланням, а не за значенням. Тому, якщо два масиви вказують на один і той самий об'єкт в пам'яті, вони будуть рівні.
const c = [1, 2, 3];
console.log(a === c); // false
//*Якщо два масиви містять однакові значення, але вказують на різні об'єкти в пам'яті (мають різні посилання на місце в пам'яті), вони не будуть рівні.

//!Методи масивів дозволяють виконувати різні операції з масивами, такі як додавання, видалення, сортування та інше.
//*Деякі з найбільш поширених методів масивів включають:
//* joint() - об'єднує два або більше масивів в один
//* splice() - видаляє або замінює елементи в масиві
//* slice() - створює новий масив, який містить частину елементів з оригінального масиву
//* pop() - видаляє останній елемент з масиву і повертає його
//* shift() - видаляє перший елемент з масиву і повертає його
//* unshift() - додає один або більше елементів на початок масиву і повертає нову довжину масиву
//* concat() - об'єднує два або більше масивів в один
//* indexOf() - повертає перший індекс, за яким знайдено вказаний елемент у масиві
//* includes() - перевіряє, чи містить масив вказаний елемент
//* forEach() - виконує вказану функцію для кожного елемента масиву
//* map() - створює новий масив з результатами виклику вказаної функції для кожного елемента масиву
//* filter() - створює новий масив з усіма елементами, які проходять перевірку вказаної функції
//* reduce() - застосовує функцію до кожного елемента масиву (зліва направо) і повертає одне значення
//* find() - повертає перший елемент масиву, який задовольняє умові, заданій у функції
//* findIndex() - повертає індекс першого елемента масиву, який задовольняє умові, заданій у функції
//* sort() - сортує елементи масиву в порядку зростання або спадання
//* reverse() - змінює порядок елементів масиву на зворотний
//* join() - об'єднує всі елементи масиву в рядок, розділяючи їх вказаним роздільником
//* slice() - повертає новий масив, який містить копію частини оригінального масиву
//* toString() - повертає рядкове представлення масиву
//* push() - додає один або більше елементів в кінець масиву і повертає нову довжину масиву

const courses = ["HTML", "CSS", "JavaScript", "React", "Node.js"];
const str = courses.join(" "); // *Метод join() об'єднує всі елементи масиву в рядок, розділяючи їх вказаним роздільником (в даному випадку пробілом)*/
console.log(str); // 'HTML CSS JavaScript React Node.js'
const str1 = courses.join(""); // *Якщо роздільник не вказано, то елементи масиву будуть об'єднані без роздільника
console.log(str1); // 'HTMLCSSJavaScriptReactNode.js'
const str3 = str.split(" "); // *Метод split() розділяє рядок на масив, використовуючи вказаний роздільник (в даному випадку пробіл)*/
console.log(str3); // ['HTML', 'CSS', 'JavaScript', 'React', 'Node.js']
const str4 = courses.slice(0, 4); // *Метод slice() повертає новий масив, який містить копію частини оригінального масиву (в даному випадку з 0 по 4 індекс)*/
console.log(str4); // ['HTML', 'CSS', 'JavaScript', 'React']
const str5 = courses.slice(1); // *Якщо другий аргумент не вказано, то метод slice() повертає всі елементи з вказаного індексу до кінця масиву
console.log(str5); // ['CSS', 'JavaScript', 'React', 'Node.js']
const str6 = courses.slice(-2); // *Якщо перший аргумент від'ємний, то метод slice() повертає елементи з кінця масиву (в даному випадку останні 2 елементи)*/
console.log(str6); // ['React', 'Node.js']
const str7 = courses.slice(); // *Якщо метод slice() викликається без аргументів, то він повертає копію всього масиву
console.log(str7); // ['HTML', 'CSS', 'JavaScript', 'React', 'Node.js']
const arr = [1, 2, 3, 4, 5];
const result = courses.concat(arr); // *Метод concat() об'єднує два або більше масивів в один
console.log(result); // ['HTML', 'CSS', 'JavaScript', 'React', 'Node.js', 1, 2, 3, 4, 5]
const result1 = arr.concat(["lalala", "tototo"], courses); // *Метод concat() може приймати кілька аргументів, які будуть об'єднані в один масив
console.log(result1);

const index = courses.indexOf("JavaScript"); // *Метод indexOf() повертає перший індекс, за яким знайдено вказаний елемент у масиві/
//*Якщо елемент не знайдено, то метод повертає -1
//* чутливий до регістру

courses.push("PostgreSQL", "React"); // *Метод push() додає один або більше елементів в кінець масиву і повертає нову довжину масиву
console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'React', 'Node.js', 'PostgreSQL', 'React']
const a2 = courses.push("Node.js", "lalala"); // *Метод push() повертає довжину новоствореного масиву
console.log(a2); // 9

const a3 = courses.pop(); // *Метод pop() видаляє останній елемент з масиву і повертає його
console.log("a3", a3); // a2 React
console.log("courses", courses); //
// ['HTML', 'CSS', 'JavaScript', 'React', 'Node.js', 'PostgreSQL']

const a4 = courses.shift(); // *Метод shift() видаляє перший елемент з масиву і повертає його
console.log("a4", a4); // a4 HTML
console.log("courses", courses); // ['CSS', 'JavaScript', 'React', 'Node.js', 'PostgreSQL']
courses.unshift("HTML"); // *Метод unshift() додає один або більше елементів на початок масиву і повертає нову довжину масиву
console.log("courses", courses); // ['HTML', 'CSS', 'JavaScript', 'React', 'Node.js', 'PostgreSQL']
const a5 = courses.splice(2, 1); // *Метод splice() видаляє або замінює елементи в масиві
console.log("a5", a5); // a5 ['JavaScript'] - повертає масив з видаленими елементами
console.log("courses", courses); // ['HTML', 'CSS', 'React', 'Node.js', 'PostgreSQL'] - масив після видалення елемента
courses.splice(2, 0, "JavaScript"); // *Метод splice() може також додавати елементи в масив
console.log("courses", courses); // ['HTML', 'CSS', 'JavaScript', 'React', 'Node.js', 'PostgreSQL'] - масив після додавання елемента

courses.includes("JavaScript"); // *Метод includes() перевіряє, чи містить масив вказаний елемент який переданий як аргумент, і повертає булеве значення true або false
console.log(courses.includes("JavaScript")); // true
console.log(courses.includes("Python")); // false
//
// "Chandler", "Ross"];

for (let i = 0; i < friends.length; i++) {
  console.log(i); // 0 1 2 3 4
  console.log(friends[i]); // Rachel Phoebe Joey Chandler Ross
  friends[i] = friends[i] + "!!!"; // *Перевизначення елементів масиву за допомогою циклу for*/
  console.log(friends[i]); // Rachel!!! Phoebe!!! Joey!!! Chandler!!! Ross!!!
  console.log(friends); // ['Rachel!!!', 'Phoebe!!!', 'Joey!!!', 'Chandler!!!', 'Ross!!!']
}
console.table(friends); // *Метод console.table() виводить масив у вигляді таблиці в консолі, що дозволяє зручно переглядати дані
//*Метод forEach() виконує вказану функцію для кожного елемента масиву
friends.forEach((friend, index) => {
  console.log(index); // 0 1 2 3 4
  console.log(friend); // Rachel!!! Phoebe!!! Joey!!! Chandler!!! Ross!!!
  friends[index] = friend + "!!!"; // *Перевизначення елементів масиву за допомогою методу forEach()
});
console.log(friends); // ['Rachel!!!', 'Phoebe!!!', 'Joey!!!', 'Chandler!!!', 'Ross!!!']
//*Метод map() створює новий масив з результатами виклику вказаної функції для кожного елемента масиву

const newFriends = friends.map((friend) => {
  return friend + "!!!"; // *Перевизначення елементів масиву за допомогою методу map()
});

console.log(newFriends); // ['Rachel!!!', 'Phoebe!!!', 'Joey!!!', 'Chandler!!!', 'Ross!!!']
console.log(friends); // ['Rachel!!!', 'Phoebe!!!', 'Joey!!!', 'Chandler!!!', 'Ross!!!']
//*Метод filter() створює новий масив з усіма елементами, які проходять перевірку вказаної функції

//! ітезфція по масиву
//! Цикли для перебору масивів
//! Цикли для перебору масивів дозволяють виконувати операції над кожним елементом масиву.
//! for - це базовий цикл, який дозволяє перебирати елементи масиву за індексом.
for (let i = 0; i < friends.length; i++) {
  console.log(friends[i]); // Rachel!!! Phoebe!!! Joey!!! Chandler!!! Ross!!!
  // *Перевизначення елементів масиву за допомогою циклу for
  friends[i] += "!!!";
}
//! for...of - це цикл, який дозволяє перебирати елементи масиву або об'єкта.
for (const friend of friends) {
  console.log(friend); // Rachel!!! Phoebe!!! Joey!!! Chandler!!! Ross!!!
  // *Перевизначення елементів масиву за допомогою циклу for...of не можливе, оскільки цикл for...of не надає доступ до індексу елемента
}
for (const item of friends) {
  console.log(item); // Rachel!!! Phoebe!!! Joey!!! Chandler!!! Ross!!!
}
//* Різниця між for і for...of полягає в тому, що for дозволяє отримати доступ до індексу елемента, а for...of - ні. Цикл for...of зручніший для читання коду, коли не потрібно використовувати індекс елемента.

//* Напиши скрипт для обчислення площі прямокутника зі сторонами, значення яких зберігаються в змінній velues увигляді рядка.Значення гарантовано розділені пробілом.

const values = "8 10"; // *Змінна values містить рядок з двома числами, розділеними пробілом
const arr = values.split(" "); // *Метод split() розділяє рядок на масив, використовуючи пробіл як роздільник
const width = Number(arr[0]); // *Перший елемент масиву перетворюється на число і зберігається в змінній width
const height = Number(arr[1]); // *Другий елемент масиву перетворюється на число і зберігається в змінній height
const area = width * height; // *Площа прямокутника обчислюється як добуток ширини та висоти
const res = arr[0] * arr[1]; // *Альтернативний спосіб обчислення площі прямокутника без перетворення на числа
//?console.log(res); // 80
console.log(`Площа прямокутника: ${area}`); // Площа прямокутника: 80

// const res1 = (Number(arr[0]) + Number(arr[1])) * 2; // 36
//* Альтернативний запис
const res1 = (+arr[0] + +arr[1]) * 2; //* онарний плюс

//* Напиши скрипт для перебору масиву fruits. Для кожного елемена масиву виведи в консоль рядок у форматі номер_елемента: значення_елемента. Нумерація елементів повинна починатися з 1.

const fruits = ["🍎", "🍇", "🍑", "🍌", "🍋"];

for (let i = 0; i < fruits.length; i++) {
  console.log(`${i + 1}: ${fruits[i]}`);
}
//*Напиши скрипт, який підраховує суму всіх парних чисел у масиві.
const numbers = [1, 5, 8, 9, 12, 4, 15, 27, 30, 18, 14];

let total = 0;

for (const number of numbers) {
  if (number % 2 === 0) {
    total += number;//? 86
  }
}

for (const number of numbers) {
  if (!(number % 2)) {
    total += number;//?86
  }

  
}

console.log(total); //

for (const number of numbers) {
  if (number % 2 !== 0) {
    continue;
  }

  total += number;
}

console.log(total); //
//*Напиши скрипт, який виводить у консоль ім'я та телефонний номер користувача.У змінних names та phones зберігаються рядки імен та телефонних номерів,розділені комами. Порядковий номер імен та телефонів у рядках вказують на відповідність. Кількість імен та телефонів гарантовано однакова.
 */

const names = "Jacob,William,Solomon,Artemis";
const phones = "38001234567,38001112233,380055566377,380055566300";

const namesArr = names.split(",");
const phonesArr = phones.split(",");

for(let i = 0; i < namesArr.length; i++) {
    console.log(`${namesArr[i]}: ${phonesArr[i]}`);
}

/**
//  * Напиши скрипт, який виводить у консоль усі слова рядка крім першого і останнього. Результуючий рядок не повинен починатися або закінчуватися символ пробілу. Скрипт повинен працювати для будь-якого рядка.*/


const string = "     Welcome      to the     future      ";

const arr = string.trim().split(" ");
const result = arr.slice(1, arr.length - 1).join(" ").trim();

console.log(result);

//* Напиши скрипт пошуку найменшого числа у масиві. Код повинен працювати для будь-якого масиву чисел. Використовуй цикл для розв'язання задачі.

const values = [100, 17, 94, 1, 23, 37];
let min;

for(let i = 0; i < values.length; i++) {
    if(i === 0) {
        min = values[i];
    } else if(values[i] < min) {
        min = values[i];
    }
}

console.log(min);
